{"version":3,"file":"main.3ee95b84.iframe.bundle.js","mappings":";AA0DA;AACA;;AAEA;AAEA;;AAEA;AAEA;;;;AAKA;;;;AAKA;;;AAIA;AACA;;AAIA;AChCA;;;AAGA;AAEA;;AAEA;AAEA;;;;AAKA;;;;AAKA;;;;AAKA;;AAIA","sources":["webpack://nimble-design-system/./src/components/nimbleDateRange/NimbleDateRange.tsx","webpack://nimble-design-system/./src/components/nimbleDatePicker/NimbleDatePicker.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport {DatePicker} from 'antd';\nimport {MinusOutlined} from '@ant-design/icons';\nimport styled from 'styled-components/dist/styled-components.js';\nimport dayjs from 'dayjs';\nimport type {Dayjs} from 'dayjs';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport weekday from 'dayjs/plugin/weekday';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport weekYear from 'dayjs/plugin/weekYear';\n\nimport {InternalStandardProps as StandardProps} from '@mui/material';\n\nimport {InputLabel, InputLabelProps, InputBoxProps, InputError} from '../shared';\n\nimport './NimbleDateRangeStyles.css';\n\ndayjs.extend(customParseFormat);\ndayjs.extend(advancedFormat);\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(weekOfYear);\ndayjs.extend(weekYear);\n\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\ninterface NimbleDateRangeProps\n  extends InputLabelProps,\n    InputBoxProps,\n    StandardProps<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange' | 'children'> {\n  isError?: boolean;\n  errorMessage?: string;\n  onDateChange?: (dates: [string, string]) => void;\n  onBlur?: () => void;\n  defaultValue?: [string, string];\n  disablePast?: boolean;\n  maxDifferentDays?: number;\n  placeholderArray?: [string, string];\n  disabled?: boolean;\n  name?: string;\n  height?: string;\n  fontSize?: string;\n  isFormik?: boolean;\n  value?: any;\n}\n\nconst StyledRangePicker = styled(DatePicker.RangePicker)<{\n  borderColor: string;\n  activeBoxShadow: string;\n  hoverBoxShadow: string;\n  isError?: boolean;\n  width: string;\n  fontFamily?: string;\n  disabled?: boolean;\n  height: string;\n  fontSize: string;\n}>`\n  width: ${(props: {width: string}) => props.width};\n  max-height: ${(props: {height: string}) => props.height};\n  border: 1px solid;\n  border-color: ${(props: {borderColor: string; isError?: boolean; disabled: boolean}) =>\n    props.isError ? '#EC4C29' : !props.disabled ? props.borderColor : '#cbcfd4'}!important;\n  box-shadow: ${(props: {isError?: boolean}) => (props.isError ? '0px 0px 0px 2px #FAD4CC' : 'none')};\n  &:hover {\n    border-color: ${(props: {borderColor: string; disabled: boolean}) =>\n      !props.disabled ? props.borderColor : 'none'} !important ;\n    box-shadow: ${(props: {hoverBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.hoverBoxShadow : 'none'}!important;\n  }\n  &:focus {\n    border: none !important;\n    box-shadow: ${(props: {activeBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.activeBoxShadow : 'none'}!important;\n  }\n  &:active {\n    border: none !important;\n    box-shadow: ${(props: {activeBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.activeBoxShadow : 'none '}!important;\n  }\n  .ant-picker-input > input {\n    font-size: ${(props: {fontSize: string}) => props.fontSize};\n    font-family: ${(props: {fontFamily: string}) => props.fontFamily}!important;\n  }\n`;\n\nexport const NimbleDateRange: React.FC<NimbleDateRangeProps> = ({\n  label,\n  labelSize = 14,\n  labelWeight = '600',\n  fontFamily,\n  isRequired,\n  borderColor = '#9A9FA5',\n  activeBoxShadow = '0px 0px 0px 2px #DBF2FB, 0px 0px 0px 1px #77CBED inset',\n  hoverBoxShadow = '0px 0px 0px 2px #dae3f0',\n  width = '575px',\n  isError,\n  errorMessage,\n  onDateChange,\n  onBlur,\n  defaultValue = [],\n  disablePast,\n  maxDifferentDays,\n  placeholderArray = ['Start Date', 'End Date'],\n  disabled = false,\n  name = undefined,\n  height = '34px',\n  fontSize = '14px',\n  isFormik = false,\n  value,\n  ...props\n}) => {\n  const [dates, setDates] = useState<RangeValue>(null);\n\n  const handleCalandarChange = (dates: any, dateStrings: [string, string]) => {\n    onDateChange && onDateChange(dateStrings);\n    setDates(dates);\n  };\n\n  const disabledDate = (current: Dayjs) => {\n    if (disablePast && !maxDifferentDays) {\n      return current && current.valueOf() < Date.now() ? true : false;\n    } else if (!disablePast && maxDifferentDays) {\n      const tooLate = dates && dates[0] && current.diff(dates[0], 'days') >= maxDifferentDays;\n      const tooEarly = dates && dates[1] && dates[1].diff(current, 'days') >= maxDifferentDays;\n      return !!tooEarly || !!tooLate;\n    } else if (disablePast && maxDifferentDays) {\n      const tooLate =\n        (dates && dates[0] && current.diff(dates[0], 'days') >= maxDifferentDays) ||\n        (current && current.valueOf() < Date.now());\n      const tooEarly = dates && dates[1] && dates[1].diff(current, 'days') >= maxDifferentDays;\n      return !!tooEarly || !!tooLate;\n    }\n  };\n\n  const onOpenChange = (open: boolean) => {\n    if (open) {\n      setDates([null, null]);\n    } else {\n      setDates(null);\n    }\n  };\n\n  return (\n    <span>\n      <InputLabel\n        labelSize={labelSize}\n        labelWeight={labelWeight}\n        fontFamily={fontFamily}\n        isRequired={isRequired}\n        label={label}\n        disabled={disabled}\n      />\n      <StyledRangePicker\n        size=\"large\"\n        separator={<MinusOutlined rev={undefined} />}\n        borderColor={borderColor}\n        activeBoxShadow={activeBoxShadow}\n        hoverBoxShadow={hoverBoxShadow}\n        width={width}\n        height={height}\n        isError={isError}\n        onCalendarChange={handleCalandarChange}\n        defaultValue={[defaultValue[0] && dayjs(defaultValue[0]), defaultValue[1] && dayjs(defaultValue[1])]}\n        disabledDate={disabledDate}\n        onChange={(val: any) => {}}\n        onOpenChange={onOpenChange}\n        changeOnBlur\n        placeholder={placeholderArray}\n        fontFamily={fontFamily}\n        fontSize={fontSize}\n        disabled={disabled}\n        name={name}\n        value={isFormik && value?.length === 2 ? [dayjs(value[0]), dayjs(value[1])] : undefined}\n        onBlur={onBlur}\n        {...props}\n      />\n      <InputError isError={isError} errorMessage={errorMessage} fontFamily={fontFamily} />\n    </span>\n  );\n};\n","import React, {useState} from 'react';\nimport {DatePicker} from 'antd';\nimport styled from 'styled-components/dist/styled-components.js';\nimport dayjs from 'dayjs';\nimport type {Dayjs} from 'dayjs';\nimport {InternalStandardProps as StandardProps} from '@mui/material';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport weekday from 'dayjs/plugin/weekday';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport weekYear from 'dayjs/plugin/weekYear';\n\nimport {InputLabel, InputLabelProps, InputBoxProps, InputError} from '../shared';\n\nimport './nimbleDatePickerStyles.css';\n\ndayjs.extend(customParseFormat);\ndayjs.extend(advancedFormat);\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(weekOfYear);\ndayjs.extend(weekYear);\n\ntype DateType = Dayjs | null;\n\ninterface NimbleDatePickerProps\n  extends InputLabelProps,\n    InputBoxProps,\n    StandardProps<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange' | 'children'> {\n  isError?: boolean;\n  errorMessage?: string;\n  onDateChange?: (dates: string) => void;\n  onBlur?: () => void;\n  defaultValue?: string;\n  disablePast?: boolean;\n  minDate?: Date,\n  maxDifferentDays?: number;\n  placeholder?: string;\n  disabled?: boolean;\n  name?: string;\n  isFormik?: boolean;\n  value?: any;\n}\n\nconst StyledDatePicker = styled(DatePicker)<{\n  borderColor: string;\n  activeBoxShadow: string;\n  hoverBoxShadow: string;\n  isError?: boolean;\n  width: string;\n  fontFamily?: string;\n  disabled?: boolean;\n}>`\n  width: ${(props: {width: string}) => props.width};\n  max-height: 34px;\n  border: 1px solid;\n  border-color: ${(props: {borderColor: string; isError?: boolean; disabled: boolean}) =>\n    props.isError ? '#EC4C29' : !props.disabled ? props.borderColor : '#cbcfd4'}!important;\n  box-shadow: ${(props: {isError?: boolean}) => (props.isError ? '0px 0px 0px 2px #FAD4CC' : 'none')};\n  &:hover {\n    border-color: ${(props: {borderColor: string; disabled: boolean}) =>\n      !props.disabled ? props.borderColor : 'none'} !important ;\n    box-shadow: ${(props: {hoverBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.hoverBoxShadow : 'none'}!important;\n  }\n  &:focus {\n    border: none !important;\n    box-shadow: ${(props: {activeBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.activeBoxShadow : 'none'}!important;\n  }\n  &:active {\n    border: none !important;\n    box-shadow: ${(props: {activeBoxShadow: string; disabled: boolean}) =>\n      !props.disabled ? props.activeBoxShadow : 'none '}!important;\n  }\n  input {\n    font-size: 14px !important;\n    font-family: ${(props: {fontFamily: string}) => props.fontFamily}!important;\n  }\n`;\n\nexport const NimbleDatePicker: React.FC<NimbleDatePickerProps> = ({\n  label,\n  labelSize = 14,\n  labelWeight = '600',\n  fontFamily = 'Roboto,Helvetica,Arial,sans-serif',\n  isRequired,\n  borderColor = '#9A9FA5',\n  activeBoxShadow = '0px 0px 0px 2px #DBF2FB, 0px 0px 0px 1px #77CBED inset',\n  hoverBoxShadow = '0px 0px 0px 2px #dae3f0',\n  width = '100%',\n  isError,\n  errorMessage,\n  onDateChange,\n  onBlur,\n  defaultValue = '',\n  disablePast,\n  minDate,\n  maxDifferentDays,\n  placeholder = 'Select date',\n  disabled = false,\n  name = undefined,\n  isFormik = false,\n  value,\n  ...props\n}) => {\n  const handleCalandarChange = (date: any, dateString: string) => {\n    onDateChange && onDateChange(dateString);\n  };\n\n  const disabledDate = (current: Dayjs) => {\n    if (disablePast) {\n      const tooLate = current && current.valueOf() < Date.now();\n      return !!tooLate;\n    } else if(minDate){\n      const minSelectableDate = current && current.valueOf() < minDate.valueOf();\n      return !!minSelectableDate;\n    } \n  };\n\n  return (\n    <span>\n      <InputLabel\n        labelSize={labelSize}\n        labelWeight={labelWeight}\n        fontFamily={fontFamily}\n        isRequired={isRequired}\n        label={label}\n        disabled={disabled}\n      />\n      <StyledDatePicker\n        size=\"large\"\n        borderColor={borderColor}\n        activeBoxShadow={activeBoxShadow}\n        hoverBoxShadow={hoverBoxShadow}\n        width={width}\n        isError={isError}\n        defaultValue={defaultValue && dayjs(defaultValue)}\n        disabledDate={disabledDate}\n        onChange={handleCalandarChange}\n        changeOnBlur\n        placeholder={placeholder}\n        fontFamily={fontFamily}\n        disabled={disabled}\n        name={name}\n        onBlur={onBlur}\n        value={isFormik ? value && dayjs(value) : undefined}\n        {...props}\n      />\n      <InputError isError={isError} errorMessage={errorMessage} fontFamily={fontFamily} />\n    </span>\n  );\n};\n"],"names":[],"sourceRoot":""}